"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlotStatus = exports.FacilityStatus = exports.GroundStatus = exports.GroundPrice = exports.GroundSlot = exports.GroundFacility = exports.GroundAdditionalInfo = exports.Ground = exports.ContactInfo = void 0;
var common_constants_1 = require("../common/common-constants");
var ContactInfo = /** @class */ (function () {
    function ContactInfo() {
        this.name = '';
        this.phone = '';
        this.email = '';
    }
    return ContactInfo;
}());
exports.ContactInfo = ContactInfo;
var Ground = /** @class */ (function () {
    function Ground() {
        this.id = '';
        this.name = '';
        this.addressLine = '';
        this.imgLinks = [];
        this.mapLink = '';
        this.city = '';
        this.state = '';
        this.price = new GroundPrice();
        this.status = GroundStatus.pending;
    }
    Object.defineProperty(Ground.prototype, "imgLink", {
        get: function () {
            var _a;
            return ((_a = this.imgLinks) === null || _a === void 0 ? void 0 : _a.length) ? this.imgLinks[0] : common_constants_1.Constants.DEFAULT_IMG;
        },
        enumerable: false,
        configurable: true
    });
    return Ground;
}());
exports.Ground = Ground;
var GroundAdditionalInfo = /** @class */ (function () {
    function GroundAdditionalInfo() {
        this.description = '';
        this.rules = '';
        this.website = '';
        this.contactInfo = new ContactInfo();
    }
    return GroundAdditionalInfo;
}());
exports.GroundAdditionalInfo = GroundAdditionalInfo;
var GroundFacility = /** @class */ (function () {
    function GroundFacility() {
        this.id = '';
        this.name = '';
        this.groundId = '';
        this.maxPlayers = common_constants_1.Constants.DEFAULT_FACILITY_MAX_PLAYER_LIMIT;
        this.status = FacilityStatus.notAvailable;
    }
    return GroundFacility;
}());
exports.GroundFacility = GroundFacility;
var GroundSlot = /** @class */ (function () {
    function GroundSlot() {
        this.id = '';
        this.timestamp = new Date().getTime();
        this.groundId = '';
        this.facilityId = '';
        this.allowedCount = common_constants_1.Constants.DEFAULT_FACILITY_ALLOWED_PLAYER_LIMIT;
        this.participantCount = 0;
        this.status = SlotStatus.notAvailable;
        this.price = common_constants_1.Constants.DEFAULT_SLOT_PRICE;
    }
    GroundSlot.prototype.addParticipant = function (update) {
        var newCount = this.participantCount + Number(update);
        if (newCount <= this.allowedCount) {
            this.participantCount = newCount;
        }
    };
    GroundSlot.prototype.updateStatus = function () {
        if (this.participantCount >= this.allowedCount) {
            this.status = SlotStatus.booked;
        }
    };
    GroundSlot.prototype.getTimeOfDay = function () {
        var date = new Date(this.timestamp);
        var hour = date.getHours();
        if (hour >= 5 && hour < 12) {
            return common_constants_1.Constants.DAY_TIMES.morning;
        }
        else if (hour >= 12 && hour < 17) {
            return common_constants_1.Constants.DAY_TIMES.afternoon;
        }
        else if (hour >= 17 && hour < 21) {
            return common_constants_1.Constants.DAY_TIMES.evening;
        }
        else {
            return common_constants_1.Constants.DAY_TIMES.night;
        }
    };
    Object.defineProperty(GroundSlot.prototype, "availableSpot", {
        get: function () {
            return this.allowedCount - this.participantCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GroundSlot.prototype, "isFull", {
        get: function () {
            return this.participantCount >= this.allowedCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GroundSlot.prototype, "isCancelled", {
        get: function () {
            return this.status === SlotStatus.cancelled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GroundSlot.prototype, "isFinished", {
        get: function () {
            var current = new Date().getTime();
            return this.timestamp <= (current - common_constants_1.Constants.ONE_HOUR_IN_MILLISECONDS);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GroundSlot.prototype, "isOngoing", {
        get: function () {
            var current = new Date().getTime();
            return this.timestamp < current && this.timestamp >= (current - common_constants_1.Constants.ONE_HOUR_IN_MILLISECONDS);
        },
        enumerable: false,
        configurable: true
    });
    return GroundSlot;
}());
exports.GroundSlot = GroundSlot;
var GroundPrice = /** @class */ (function () {
    function GroundPrice() {
        this.single = 0;
        this.bulk = 0;
    }
    return GroundPrice;
}());
exports.GroundPrice = GroundPrice;
var GroundStatus;
(function (GroundStatus) {
    GroundStatus[GroundStatus["pending"] = 0] = "pending";
    GroundStatus[GroundStatus["approved"] = 1] = "approved";
    GroundStatus[GroundStatus["rejected"] = 2] = "rejected";
})(GroundStatus = exports.GroundStatus || (exports.GroundStatus = {}));
var FacilityStatus;
(function (FacilityStatus) {
    FacilityStatus[FacilityStatus["notAvailable"] = 0] = "notAvailable";
    FacilityStatus[FacilityStatus["available"] = 1] = "available";
})(FacilityStatus = exports.FacilityStatus || (exports.FacilityStatus = {}));
var SlotStatus;
(function (SlotStatus) {
    SlotStatus[SlotStatus["notAvailable"] = 0] = "notAvailable";
    SlotStatus[SlotStatus["available"] = 1] = "available";
    SlotStatus[SlotStatus["booked"] = 2] = "booked";
    SlotStatus[SlotStatus["cancelled"] = 3] = "cancelled";
})(SlotStatus = exports.SlotStatus || (exports.SlotStatus = {}));
