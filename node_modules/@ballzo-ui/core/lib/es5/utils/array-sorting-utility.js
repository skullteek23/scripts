"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArraySorting = void 0;
var ArraySorting = /** @class */ (function () {
    function ArraySorting() {
    }
    /**
     * Sort array of objects by key
     * @param key
     * @param order
     * @param isConvertNA
     * @returns
     */
    ArraySorting.sortObjectByKey = function (key, order, isConvertNA) {
        if (order === void 0) { order = 'asc'; }
        if (isConvertNA === void 0) { isConvertNA = true; }
        return function innerSort(a, b) {
            var isTypescriptProperty = key in a || key in b;
            if (isTypescriptProperty || a.hasOwnProperty(key) || b.hasOwnProperty(key)) {
                if (Array.isArray(a[key])) {
                    var valueA = a[key].join(', ').toUpperCase();
                    var valueB = b[key].join(', ').toUpperCase();
                    return ArraySorting.getSortedElement(valueA, valueB, order);
                }
                else {
                    var valueA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];
                    var valueB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];
                    if (isConvertNA) {
                        valueA = !valueA || valueA === 'N/A' ? null : valueA;
                        valueB = !valueB || valueB === 'N/A' ? null : valueB;
                    }
                    else {
                        valueA = !valueA ? null : valueA;
                        valueB = !valueB ? null : valueB;
                    }
                    return ArraySorting.getSortedElement(valueA, valueB, order);
                }
            }
            // property doesn't exist on either object
            return 0;
        };
    };
    /**
     * Get sorted element
     * @param valueA
     * @param valueB
     * @param order
     * @returns
     */
    ArraySorting.getSortedElement = function (valueA, valueB, order) {
        var comparison = 0;
        if (valueB === null) {
            comparison = 1;
        }
        else if (valueA === null) {
            comparison = -1;
        }
        else if (valueA > valueB) {
            comparison = 1;
        }
        else if (valueA < valueB) {
            comparison = -1;
        }
        return order === 'desc' ? comparison * -1 : comparison;
    };
    return ArraySorting;
}());
exports.ArraySorting = ArraySorting;
