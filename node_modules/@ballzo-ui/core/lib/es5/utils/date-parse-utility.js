"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateParseUtility = void 0;
var common_constants_1 = require("../common/common-constants");
var DateParseUtility = /** @class */ (function () {
    function DateParseUtility() {
    }
    /**
     * Returns min-max range for a given day
     * @param day
     * @returns
     */
    DateParseUtility.getMaxRange = function (day) {
        var now = new Date();
        var today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
        var tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        var dayAfter = new Date(today);
        dayAfter.setDate(today.getDate() + 2);
        switch (day) {
            case common_constants_1.TabLabel.today:
                return { min: today.getTime(), max: tomorrow.getTime() - 1 };
            case common_constants_1.TabLabel.tomorrow:
                return { min: tomorrow.getTime(), max: dayAfter.getTime() - 1 };
            case common_constants_1.TabLabel.dayAfter:
                return { min: dayAfter.getTime(), max: dayAfter.getTime() + 24 * 60 * 60 * 1000 - 1 };
            default:
                return { min: 0, max: 1 }; // Return undefined for invalid input
        }
    };
    /**
     * Formats timestamp to 12 hour format
     * @param timestamp
     * @returns
     */
    DateParseUtility.formatTimestampTo12Hour = function (timestamp) {
        var date = new Date(timestamp);
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var period = hours >= 12 ? 'PM' : 'AM';
        var formattedHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
        var formattedTime = formattedHours + ":" + minutes.toString().padStart(2, '0') + " " + period;
        return formattedTime;
    };
    /**
     * Returns relative time for a given timestamp in milliseconds
     * @param {number} timestamp
     * @returns
     */
    DateParseUtility.getTimeRelative = function (timestamp) {
        var timestampDate = new Date(timestamp); // Convert timestamp to Date object
        var currentDate = new Date(); // Current date
        // Set time to midnight to compare date only
        timestampDate.setHours(0, 0, 0, 0);
        currentDate.setHours(0, 0, 0, 0);
        var difference = Math.floor((timestampDate.getTime() - currentDate.getTime()) / (common_constants_1.Constants.ONE_DAY_IN_MILLISECONDS)); // Difference in days
        if (timestamp < new Date().getTime()) {
            return common_constants_1.TabLabel.past;
        }
        else if (difference === 0) {
            return common_constants_1.TabLabel.today;
        }
        else if (difference === 1) {
            return common_constants_1.TabLabel.tomorrow;
        }
        else if (difference === 2) {
            return common_constants_1.TabLabel.dayAfter;
        }
        else if (difference < 0) {
            return common_constants_1.TabLabel.past;
        }
        else {
            return common_constants_1.TabLabel.farAway;
        }
    };
    return DateParseUtility;
}());
exports.DateParseUtility = DateParseUtility;
