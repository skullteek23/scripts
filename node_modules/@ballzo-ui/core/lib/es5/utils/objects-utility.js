"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareFunction = exports.getValueByIndex = exports.findIndexByValue = exports.combineArrayDataWithId = exports.convertObjectToFirestoreData = exports.convertFirestoreDataArray = exports.convertFirestoreData = exports.isEnumKey = void 0;
/**
 * Check if the value is an enum key
 * @param value
 * @param myEnum
 * @returns {boolean}
 */
function isEnumKey(value, myEnum) {
    if (value === null || value === undefined) {
        return false;
    }
    for (var enumKey in myEnum) {
        if (myEnum.hasOwnProperty(enumKey) && myEnum[enumKey] === value) {
            return true;
        }
    }
    return false;
}
exports.isEnumKey = isEnumKey;
/**
 * Converts the Firestore data to the model class
 * @param firestoreData
 * @param modelClass
 * @returns
 */
function convertFirestoreData(firestoreData, modelClass) {
    var defaultModel = new modelClass();
    // Merge Firestore data with the default model object to ensure all keys are present
    var mergedData = __assign(__assign({}, defaultModel), firestoreData);
    // Create a new instance of the model class using the merged data
    var model = new modelClass();
    // Assign the merged data to the model instance
    Object.assign(model, mergedData);
    return model;
}
exports.convertFirestoreData = convertFirestoreData;
/**
 * Converts the Firestore data array to the model class array
 * @param firestoreDataArray
 * @param modelClass
 * @returns
 */
function convertFirestoreDataArray(firestoreDataArray, modelClass) {
    if ((firestoreDataArray === null || firestoreDataArray === void 0 ? void 0 : firestoreDataArray.length) === 0) {
        return [];
    }
    return firestoreDataArray.map(function (firestoreData) { return convertFirestoreData(firestoreData, modelClass); });
}
exports.convertFirestoreDataArray = convertFirestoreDataArray;
/**
 * Converts the custom typed object to normal object data
 * @param obj
 * @returns
 */
function convertObjectToFirestoreData(obj) {
    var newObj = JSON.parse(JSON.stringify(obj));
    if ('id' in newObj) {
        delete newObj['id'];
    }
    return newObj;
}
exports.convertObjectToFirestoreData = convertObjectToFirestoreData;
/**
 * Combines the array data with the id
 * @param response
 * @returns
 */
function combineArrayDataWithId(response) {
    if (!(response === null || response === void 0 ? void 0 : response.length)) {
        return [];
    }
    return response.map(function (resp) {
        var data = resp.data();
        if (resp.exists() && data) {
            return __assign(__assign({}, data), { id: resp.id });
        }
        return {};
    });
}
exports.combineArrayDataWithId = combineArrayDataWithId;
/**
 * Finds the index of the value in the enum
 * @param enumType
 * @param value
 * @returns
 */
function findIndexByValue(value, enumType) {
    var keys = Object.keys(enumType);
    for (var index = 0; index < keys.length; index++) {
        var key = keys[index];
        if (enumType[key] === value) {
            return index;
        }
    }
    return undefined;
}
exports.findIndexByValue = findIndexByValue;
/**
 * Gets the value from enum by index
 * @param enumType
 * @param index
 * @returns
 */
function getValueByIndex(enumType, index) {
    var keys = Object.keys(enumType);
    var values = Object.values(enumType);
    if (index >= 0 && index < keys.length) {
        return values[index];
    }
    return undefined;
}
exports.getValueByIndex = getValueByIndex;
/**
 * Compares argument value with object key value
 * @param obj
 * @param comparableValue
 * @param key
 * @returns
 */
function compareFunction(obj, comparableValue, key) {
    if (obj.hasOwnProperty(key)) {
        return obj[key] === comparableValue;
    }
    return obj[key] !== comparableValue;
}
exports.compareFunction = compareFunction;
