/**
 * Check if the value is an enum key
 * @param value
 * @param myEnum
 * @returns {boolean}
 */
export declare function isEnumKey(value: any, myEnum: any): boolean;
/**
 * Converts the Firestore data to the model class
 * @param firestoreData
 * @param modelClass
 * @returns
 */
export declare function convertFirestoreData<T>(firestoreData: any, modelClass: new () => T): T;
/**
 * Converts the Firestore data array to the model class array
 * @param firestoreDataArray
 * @param modelClass
 * @returns
 */
export declare function convertFirestoreDataArray<T>(firestoreDataArray: any[], modelClass: new () => T): T[];
/**
 * Converts the custom typed object to normal object data
 * @param obj
 * @returns
 */
export declare function convertObjectToFirestoreData<T>(obj: T): any;
/**
 * Combines the array data with the id
 * @param response
 * @returns
 */
export declare function combineArrayDataWithId(response: any[]): any[];
/**
 * Finds the index of the value in the enum
 * @param enumType
 * @param value
 * @returns
 */
export declare function findIndexByValue(value: any, enumType: any): number | undefined;
/**
 * Gets the value from enum by index
 * @param enumType
 * @param index
 * @returns
 */
export declare function getValueByIndex(enumType: any, index: number): any | undefined;
/**
 * Compares argument value with object key value
 * @param obj
 * @param comparableValue
 * @param key
 * @returns
 */
export declare function compareFunction(obj: any, comparableValue: any, key: any): boolean;
